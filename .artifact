// ==========================================
// PART 1: FIRESTORE DATABASE STRUCTURE
// ==========================================
// Add these collections to your Firestore:

/*
Collection: users
  Document: admin
    - username: "admin@jacobscafe.com"
    - password: "admin123"
    - role: "admin"
  
  Document: staff
    - username: "staff@jacobscafe.com"
    - password: "staff123"
    - role: "staff"

Collection: inventory
  Document: (auto-generated ID)
    - name: "Adobo"
    - stock: 50
    - category: "meal-w-rice"
    - price: 150
    - image: "base64string or url"
    - status: "available"
*/

// ==========================================
// PART 2: INDEX.HTML (Customer Side) - REPLACE ENTIRE <script> section
// ==========================================

// Location: Replace the entire <script type="module" src="scripts.js"> section
// Delete old scripts.js content and use this:

import { firebaseConfig } from './firebaseConfig.js';
import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.0/firebase-app.js';
import { getFirestore, collection, addDoc, getDocs, doc, onSnapshot, query, where, orderBy } from 'https://www.gstatic.com/firebasejs/10.7.0/firebase-firestore.js';

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

let cart = [];
let currentOrder = null;
let tableNumber = null;
let inventory = {};

// Get or prompt for table number
function getTableNumber() {
    const urlParams = new URLSearchParams(window.location.search);
    let table = urlParams.get('table');
    
    if (!table) {
        table = prompt('Please enter your table number:');
        if (table) {
            window.location.href = `${window.location.pathname}?table=${table}`;
        } else {
            alert('Table number is required to place orders.');
            getTableNumber();
        }
    }
    return table;
}

document.addEventListener('DOMContentLoaded', async () => {
    tableNumber = getTableNumber();
    loadPreviousOrders();
    await loadInventory();
    await loadCategories();
    await loadMenuItems('all-meals');
    updateCartDisplay();
    listenToTableOrders();
});

// Load inventory and create stock mapping
async function loadInventory() {
    try {
        const inventorySnapshot = await getDocs(collection(db, 'inventory'));
        inventory = {};
        inventorySnapshot.forEach(doc => {
            const data = doc.data();
            inventory[doc.id] = data.stock || 0;
        });
    } catch (error) {
        console.error('Error loading inventory:', error);
    }
}

// Listen to real-time updates for current table orders
function listenToTableOrders() {
    const ordersQuery = query(
        collection(db, 'orders'),
        where('tableNumber', '==', tableNumber),
        orderBy('timestamp', 'desc')
    );
    
    onSnapshot(ordersQuery, (snapshot) => {
        snapshot.forEach(doc => {
            const order = { id: doc.id, ...doc.data() };
            if (order.id === currentOrder?.id) {
                currentOrder = order;
                updateStatusBadge(order.status);
                
                if (order.status === 'ready') {
                    showNotification('Your order is ready! 🎉', 'success');
                }
            }
        });
    });
}

async function loadCategories() {
    const grid = document.getElementById('categoriesGrid');
    grid.innerHTML = '<div class="loading"></div>';

    try {
        const categoriesSnapshot = await getDocs(collection(db, 'categories'));
        const categories = [];
        categoriesSnapshot.forEach(doc => {
            categories.push({ id: doc.id, ...doc.data() });
        });

        grid.innerHTML = '';
        categories.forEach(category => {
            const btn = document.createElement('div');
            btn.className = 'category-btn';
            btn.onclick = () => loadMenuItems(category.id);
            btn.innerHTML = `
                <img src="${category.image}" alt="${category.name}" 
                     onerror="this.src='https://via.placeholder.com/100x100/BA8E4A/white?text=${encodeURIComponent(category.name)}'">
                <div style="font-weight: bold; font-size: 0.9rem;">${category.name}</div>
            `;
            grid.appendChild(btn);
        });
    } catch (error) {
        grid.innerHTML = '<div class="empty-state"><p>Error loading categories</p></div>';
    }
}

async function loadMenuItems(categoryId) {
    const grid = document.getElementById('menuGrid');
    const title = document.getElementById('menuSectionTitle');
    
    grid.innerHTML = '<div class="loading"></div>';

    try {
        const categoryDoc = await getDocs(collection(db, 'categories'));
        const categories = [];
        categoryDoc.forEach(doc => {
            categories.push({ id: doc.id, ...doc.data() });
        });
        
        const category = categories.find(c => c.id === categoryId);
        title.textContent = category ? category.name : 'Menu Items';

        // Get menu items (not inventory)
        let menuQuery;
        if (categoryId === 'all-meals') {
            menuQuery = collection(db, 'menu');
        } else {
            menuQuery = query(
                collection(db, 'menu'),
                where('category', 'in', [categoryId, category?.name, category?.id])
            );
        }

        const snapshot = await getDocs(menuQuery);
        const fragment = document.createDocumentFragment();

        if (snapshot.empty) {
            const emptyDiv = document.createElement('div');
            emptyDiv.className = 'empty-state';
            emptyDiv.innerHTML = '<p>No items found in this category</p>';
            fragment.appendChild(emptyDiv);
        } else {
            for (const menuDoc of snapshot.docs) {
                const item = { id: menuDoc.id, ...menuDoc.data() };
                
                // Only show available items with stock
                if (item.status === 'available' && inventory[item.inventoryId] > 0) {
                    const itemElement = createMenuItemElement(item);
                    fragment.appendChild(itemElement);
                }
            }
        }

        grid.innerHTML = '';
        grid.appendChild(fragment);

    } catch (error) {
        grid.innerHTML = '<div class="empty-state"><p>Error loading menu items</p></div>';
    }
}

function createMenuItemElement(item) {
    const stock = inventory[item.inventoryId] || 0;
    const div = document.createElement('div');
    div.className = 'menu-item';
    div.innerHTML = `
        <img src="${item.image || 'https://via.placeholder.com/300x150/BA8E4A/white?text=' + encodeURIComponent(item.name)}"
             alt="${item.name}" onerror="this.src='https://via.placeholder.com/300x150/BA8E4A/white?text=No+Image'">
        <h4>${item.name}</h4>
        <div class="price">₱${parseFloat(item.price).toFixed(2)}</div>
        <div style="font-size: 0.85rem; color: ${stock < 10 ? '#dc3545' : '#666'}; margin-bottom: 10px;">
            ${stock} available
        </div>
        <div class="quantity-controls">
            <button class="qty-btn" onclick="changeQuantity('${item.id}', -1)">−</button>
            <input type="number" class="qty-input" id="qty-${item.id}" value="1" min="1" max="${stock}">
            <button class="qty-btn" onclick="changeQuantity('${item.id}', 1)">+</button>
        </div>
        <button class="add-to-cart-btn" onclick="addToCart('${item.id}', '${item.name}', ${item.price}, '${item.inventoryId}', ${stock})">
            Add to Cart
        </button>
    `;
    return div;
}

function updateCartDisplay() {
    const cartItems = document.getElementById('cartItems');
    const cartTotal = document.getElementById('cartTotal');

    if (cart.length === 0) {
        cartItems.innerHTML = '<div class="empty-state"><p>Your cart is empty</p></div>';
        cartTotal.textContent = 'Total: ₱0.00';
        return;
    }

    let total = 0;
    cartItems.innerHTML = '';

    cart.forEach((item, index) => {
        const itemTotal = item.price * item.quantity;
        total += itemTotal;

        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <div class="cart-item-info">
                <div class="cart-item-name">${item.name}</div>
                <div class="cart-item-price">₱${item.price.toFixed(2)} each</div>
                <div class="cart-quantity-controls">
                    <button class="cart-qty-btn" onclick="updateCartQuantity(${index}, -1)">−</button>
                    <span class="cart-quantity">${item.quantity}</span>
                    <button class="cart-qty-btn" onclick="updateCartQuantity(${index}, 1)">+</button>
                </div>
                <div class="cart-item-total">Total: ₱${itemTotal.toFixed(2)}</div>
            </div>
            <button class="remove-btn" onclick="removeFromCart(${index})">×</button>
        `;
        cartItems.appendChild(cartItem);
    });

    cartTotal.textContent = `Total: ₱${total.toFixed(2)}`;
}

window.updateCartQuantity = function(index, change) {
    if (index < 0 || index >= cart.length) return;
    const item = cart[index];
    const newQuantity = item.quantity + change;
    const maxStock = inventory[item.inventoryId] || 0;

    if (newQuantity <= 0) {
        window.removeFromCart(index);
    } else if (newQuantity <= maxStock) {
        cart[index].quantity = newQuantity;
        updateCartDisplay();
    } else {
        showNotification(`Only ${maxStock} available`, 'error');
    }
};

window.removeFromCart = function(index) {
    const removedItem = cart[index];
    cart.splice(index, 1);
    updateCartDisplay();
    showNotification(`Removed ${removedItem.name}`, 'info');
};

window.changeQuantity = function(itemId, change) {
    const input = document.getElementById(`qty-${itemId}`);
    const currentValue = parseInt(input.value);
    const max = parseInt(input.max);
    const newValue = Math.max(1, Math.min(max, currentValue + change));
    input.value = newValue;
};

window.addToCart = function(itemId, itemName, itemPrice, inventoryId, maxStock) {
    const quantityInput = document.getElementById(`qty-${itemId}`);
    const quantity = parseInt(quantityInput.value);

    if (quantity > maxStock) {
        showNotification(`Only ${maxStock} available`, 'error');
        return;
    }

    const existingItem = cart.find(item => item.id === itemId);
    if (existingItem) {
        const newTotal = existingItem.quantity + quantity;
        if (newTotal <= maxStock) {
            existingItem.quantity = newTotal;
        } else {
            showNotification(`Only ${maxStock} available`, 'error');
            return;
        }
    } else {
        cart.push({
            id: itemId,
            name: itemName,
            price: itemPrice,
            quantity: quantity,
            inventoryId: inventoryId
        });
    }

    quantityInput.value = 1;
    updateCartDisplay();
    showNotification('Added to cart!', 'success');
};

window.openPaymentModal = function() {
    if (cart.length === 0) {
        showNotification('Your cart is empty!', 'error');
        return;
    }

    const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    document.getElementById('paymentTotal').value = `₱${total.toFixed(2)}`;
    document.getElementById('amountPaid').value = '';
    document.getElementById('changeAmount').value = '';
    document.getElementById('paymentModal').classList.add('active');
};

window.closePaymentModal = function() {
    document.getElementById('paymentModal').classList.remove('active');
};

document.getElementById('amountPaid').addEventListener('input', function() {
    const total = parseFloat(document.getElementById('paymentTotal').value.replace('₱', ''));
    const paid = parseFloat(this.value) || 0;
    const change = paid - total;
    const changeField = document.getElementById('changeAmount');

    if (change >= 0) {
        changeField.value = `₱${change.toFixed(2)}`;
        changeField.style.color = '#28a745';
    } else {
        changeField.value = 'Insufficient amount';
        changeField.style.color = '#dc3545';
    }
});

window.processOrder = async function() {
    const total = parseFloat(document.getElementById('paymentTotal').value.replace('₱', ''));
    const paid = parseFloat(document.getElementById('amountPaid').value) || 0;

    if (paid < total) {
        showNotification('Insufficient payment amount!', 'error');
        return;
    }

    try {
        const order = {
            tableNumber: tableNumber,
            referenceNumber: 'JCR' + Date.now().toString().slice(-6),
            items: cart.map(item => ({
                id: item.id,
                name: item.name,
                price: item.price,
                quantity: item.quantity,
                total: item.price * item.quantity,
                inventoryId: item.inventoryId
            })),
            totalAmount: total,
            amountPaid: paid,
            change: paid - total,
            status: 'pending',
            timestamp: new Date(),
            queuePosition: await getNextQueuePosition()
        };

        const docRef = await addDoc(collection(db, 'orders'), order);
        currentOrder = { id: docRef.id, ...order };

        // Save to local storage for previous orders
        saveToPreviousOrders(currentOrder);

        cart = [];
        updateCartDisplay();
        closePaymentModal();
        showOrderStatus();
        showNotification('Order placed successfully!', 'success');

    } catch (error) {
        showNotification('Error placing order. Please try again.', 'error');
    }
};

async function getNextQueuePosition() {
    const ordersSnapshot = await getDocs(query(
        collection(db, 'orders'),
        where('status', 'in', ['pending', 'preparing'])
    ));
    return ordersSnapshot.size + 1;
}

function saveToPreviousOrders(order) {
    let previousOrders = JSON.parse(localStorage.getItem('previousOrders') || '[]');
    previousOrders.unshift({
        referenceNumber: order.referenceNumber,
        tableNumber: order.tableNumber,
        totalAmount: order.totalAmount,
        items: order.items,
        timestamp: order.timestamp.toISOString(),
        status: order.status
    });
    previousOrders = previousOrders.slice(0, 20); // Keep last 20 orders
    localStorage.setItem('previousOrders', JSON.stringify(previousOrders));
    loadPreviousOrders();
}

function loadPreviousOrders() {
    const previousOrders = JSON.parse(localStorage.getItem('previousOrders') || '[]');
    // Add UI to display previous orders - you can add this to your HTML
    console.log('Previous Orders:', previousOrders);
}

function showOrderStatus() {
    if (!currentOrder) return;

    const orderStatus = document.getElementById('orderStatus');
    const orderNumber = document.getElementById('orderNumber');
    const orderDetails = document.getElementById('orderDetails');

    orderNumber.textContent = `Table ${currentOrder.tableNumber} - Ref #${currentOrder.referenceNumber}`;

    const itemsList = currentOrder.items.map(item =>
        `<div style="display: flex; justify-content: space-between; margin: 5px 0;">
            <span>${item.name} × ${item.quantity}</span>
            <span>₱${item.total.toFixed(2)}</span>
        </div>`
    ).join('');

    orderDetails.innerHTML = `
        <div style="text-align: left;">
            ${itemsList}
            <hr style="margin: 15px 0;">
            <div style="display: flex; justify-content: space-between; font-weight: bold;">
                <span>Total:</span>
                <span>₱${currentOrder.totalAmount.toFixed(2)}</span>
            </div>
        </div>
    `;

    updateStatusBadge(currentOrder.status);
    orderStatus.classList.add('active');
}

function updateStatusBadge(status) {
    const statusBadge = document.getElementById('statusBadge');
    statusBadge.className = 'status-badge';

    switch(status) {
        case 'pending':
            statusBadge.classList.add('status-pending');
            statusBadge.textContent = '⏳ Pending Confirmation';
            break;
        case 'preparing':
            statusBadge.classList.add('status-preparing');
            statusBadge.textContent = '👨‍🍳 Preparing Your Order';
            break;
        case 'ready':
            statusBadge.classList.add('status-ready');
            statusBadge.textContent = '✅ Order Ready!';
            break;
    }
}

function showNotification(message, type = 'info') {
    const existingNotification = document.querySelector('.notification');
    if (existingNotification) {
        existingNotification.remove();
    }

    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#17a2b8'};
        color: white;
        padding: 15px 20px;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        z-index: 10000;
        font-weight: bold;
        transform: translateX(100%);
        transition: transform 0.3s ease;
    `;
    notification.textContent = message;
    document.body.appendChild(notification);

    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);

    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// ==========================================
// PART 3: STAFF.JS - Key Updates
// ==========================================

// Location: In staff.js, REPLACE the renderOrders function

function renderOrders() {
    const container = document.getElementById('ordersContainer');
    let filteredOrders = orders;

    if (currentFilter !== 'all') {
        filteredOrders = orders.filter(order => order.status === currentFilter);
    }

    // Sort by queue position
    filteredOrders.sort((a, b) => (a.queuePosition || 0) - (b.queuePosition || 0));

    if (filteredOrders.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">📝</div>
                <div class="empty-message">No ${currentFilter === 'all' ? '' : currentFilter} orders</div>
                <div class="empty-description">${currentFilter === 'all' ? 'New orders will appear here automatically' : 'No orders with this status'}</div>
            </div>
        `;
        return;
    }

    container.innerHTML = '';
    filteredOrders.forEach(order => {
        const orderElement = createOrderElement(order);
        container.appendChild(orderElement);
    });
}

// Location: In staff.js, REPLACE createOrderElement function

function createOrderElement(order) {
    const div = document.createElement('div');
    div.className = `order-card ${order.status}`;

    const orderTime = order.timestamp.toDate();
    const timeAgo = getTimeAgo(orderTime);

    const itemsList = order.items.map(item => `
        <div class="order-item">
            <span class="item-name">${item.name}</span>
            <span class="item-quantity">×${item.quantity}</span>
            <span class="item-price">₱${item.total.toFixed(2)}</span>
        </div>
    `).join('');

    div.innerHTML = `
        <div class="order-header">
            <div class="order-number">Table ${order.tableNumber}</div>
            <div class="order-time">${timeAgo}</div>
        </div>
        
        <div style="font-size: 0.85rem; color: #666; margin-bottom: 10px;">
            Ref: ${order.referenceNumber} | Queue: #${order.queuePosition || '-'}
        </div>
        
        <div class="status-badge status-${order.status}">
            ${getStatusText(order.status)}
        </div>
        
        <div class="order-items">
            ${itemsList}
        </div>
        
        <div class="order-total">
            <span>Total:</span>
            <span>₱${order.totalAmount.toFixed(2)}</span>
        </div>
        
        <div class="order-actions">
            ${getActionButtons(order)}
        </div>
    `;

    return div;
}

// Location: In staff.js, UPDATE the status filter buttons to show counts
// REPLACE setupFilters function

function setupFilters() {
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            currentFilter = this.getAttribute('data-status');
            renderOrders();
            updateFilterCounts();
        });
    });
    updateFilterCounts();
}

function updateFilterCounts() {
    const allCount = orders.length;
    const pendingCount = orders.filter(o => o.status === 'pending').length;
    const preparingCount = orders.filter(o => o.status === 'preparing').length;
    const readyCount = orders.filter(o => o.status === 'ready').length;

    document.querySelector('[data-status="all"]').textContent = `All Orders (${allCount})`;
    document.querySelector('[data-status="pending"]').textContent = `Pending (${pendingCount})`;
    document.querySelector('[data-status="preparing"]').textContent = `Preparing (${preparingCount})`;
    document.querySelector('[data-status="ready"]').textContent = `Ready (${readyCount})`;
}

// Location: In staff.js, ADD this to setupRealtimeListeners to update counts
// ADD this line inside the onSnapshot callback after "orders = newOrders;"

updateFilterCounts();

// ==========================================
// PART 4: ADMIN.JS - Inventory Management
// ==========================================

// Location: In admin.html, ADD this new section after the categories section
// Add to the sidebar menu:

<li><a href="#" class="menu-link" data-section="inventory">Inventory</a></li>

// Location: In admin.html, ADD this new content section after categories section:

<div class="content-section" id="inventory">
    <div class="section-header">
        <h2 class="section-title">Inventory Management</h2>
        <button class="btn-primary" onclick="openInventoryModal()">+ Add Inventory Item</button>
    </div>
    <table class="data-table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Category</th>
                <th>Stock</th>
                <th>Price</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="inventoryTableBody">
            <tr>
                <td colspan="7" style="text-align: center; padding: 40px;">
                    <div class="loading"></div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

// Location: In admin.js, ADD these new functions at the end before closing script tag:

async function renderInventory() {
    const tbody = document.getElementById('inventoryTableBody');
    
    try {
        const inventorySnapshot = await getDocs(collection(db, 'inventory'));
        const inventoryItems = [];
        inventorySnapshot.forEach(doc => {
            inventoryItems.push({ id: doc.id, ...doc.data() });
        });

        if (inventoryItems.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="empty-state">
                        <div>📦</div>
                        <div>No inventory items found</div>
                    </td>
                </tr>`;
            return;
        }

        tbody.innerHTML = inventoryItems.map(item => `
            <tr>
                <td>
                    <img src="${item.image || 'https://via.placeholder.com/50x50/BA8E4A/white?text=No+Image'}"
                         alt="${item.name}" class="menu-item-image">
                </td>
                <td><strong>${item.name}</strong></td>
                <td><span style="text-transform: capitalize;">${item.category}</span></td>
                <td>
                    <input type="number" value="${item.stock}" 
                           onchange="updateStock('${item.id}', this.value)"
                           style="width: 70px; padding: 5px; border: 2px solid #ddd; border-radius: 5px;">
                </td>
                <td><strong>₱${parseFloat(item.price).toFixed(2)}</strong></td>
                <td><span class="status-badge status-${item.status || 'available'}">${item.status || 'available'}</span></td>
                <td>
                    <div class="action-buttons">
                        <button class="btn-edit" onclick="editInventoryItem('${item.id}')">Edit</button>
                        <button class="btn-delete" onclick="deleteInventoryItem('${item.id}')">Delete</button>
                    </div>
                </td>
            </tr>
        `).join('');
    } catch (error) {
        console.error('Error loading inventory:', error);
    }
}

window.updateStock = async function(itemId, newStock) {
    try {
        await updateDoc(doc(db, 'inventory', itemId), {
            stock: parseInt(newStock)
        });
        showNotification('Stock updated successfully!', 'success');
    } catch (error) {
        showNotification('Error updating stock', 'error');
    }
};

// Location: Update showSection function in admin.js to include inventory case:

case 'inventory':
    renderInventory();
    break;

// ==========================================
// PART 5: LOGIN WITH FIRESTORE CREDENTIALS
// ==========================================

// Location: In admin.js, REPLACE the login form submit handler:

document.getElementById('loginForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const email = document.getElementById('email').value.trim();
    const password = document.getElementById('password').value.trim();

    try {
        const usersSnapshot = await getDocs(collection(db, 'users'));
        let authenticated = false;

        usersSnapshot.forEach(doc => {
            const user = doc.data();
            if (user.username === email && user.password === password && user.role === 'admin') {
                authenticated = true;
            }
        });

        if (authenticated) {
            document.getElementById('loginContainer').style.display = 'none';
            document.getElementById('dashboard').classList.add('active');
            initializeDashboard();
            showNotification('Welcome to Admin Dashboard!', 'success');
        } else {
            showError('Invalid email or password!');
        }
    } catch (error) {
        showError('Login error. Please try again.');
    }
});

// Location: In staff.js, REPLACE the login form submit handler:

document.getElementById('loginForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const staffId = document.getElementById('staffId').value.trim();
    const password = document.getElementById('password').value.trim();

    try {
        const usersSnapshot = await getDocs(collection(db, 'users'));
        let authenticated = false;

        usersSnapshot.forEach(doc => {
            const user = doc.data();
            if (user.username === staffId && user.password === password && user.role === 'staff') {
                authenticated = true;
            }
        });

        if (authenticated) {
            document.getElementById('loginContainer').style.display = 'none';
            document.getElementById('dashboard').classList.add('active');
            initializeDashboard();
        } else {
            showError('Invalid staff ID or password!');
        }
    } catch (error) {
        showError('Login error. Please try again.');
    }
});

// ==========================================
// PART 6: ADMIN.JS - Menu Items Update to Use Inventory
// ==========================================

// Location: In admin.js, UPDATE the menuForm submit handler to link with inventory:

document.getElementById('menuForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const itemName = document.getElementById('itemName').value.trim();
    const itemCategory = document.getElementById('itemCategory').value;
    const itemPrice = parseFloat(document.getElementById('itemPrice').value);
    const itemDescription = document.getElementById('itemDescription').value.trim() || null;
    const itemStatus = document.getElementById('itemStatus').value;
    const imageFile = document.getElementById('itemImageFile').files[0];

    if (!itemName || !itemCategory || !itemPrice) {
        showNotification('Please fill in all required fields', 'error');
        return;
    }

    const saveBtn = document.getElementById('saveMenuBtn');
    const originalText = saveBtn.textContent;

    try {
        saveBtn.disabled = true;
        saveBtn.textContent = 'Saving...';

        let imageBase64 = null;
        if (imageFile) {
            updateUploadProgress(0);
            imageBase64 = await convertImageToBase64(imageFile);
            updateUploadProgress(50);
            await new Promise(resolve => setTimeout(resolve, 500));
            updateUploadProgress(100);
        } else if (currentEditingItem) {
            const existingItem = menuItems.find(i => i.id === currentEditingItem);
            imageBase64 = existingItem?.image || null;
        }

        // Check if inventory item exists for this menu item
        let inventoryId = null;
        if (currentEditingItem) {
            const existingItem = menuItems.find(i => i.id === currentEditingItem);
            inventoryId = existingItem?.inventoryId;
        }

        // If no inventory link, try to find matching inventory item by name
        if (!inventoryId) {
            const inventorySnapshot = await getDocs(query(
                collection(db, 'inventory'),
                where('name', '==', itemName)
            ));
            if (!inventorySnapshot.empty) {
                inventoryId = inventorySnapshot.docs[0].id;
            } else {
                // Create new inventory item
                const inventoryData = {
                    name: itemName,
                    category: itemCategory,
                    price: itemPrice,
                    image: imageBase64,
                    stock: 0, // Default stock
                    status: itemStatus,
                    createdAt: Timestamp.now()
                };
                const inventoryRef = await addDoc(collection(db, 'inventory'), inventoryData);
                inventoryId = inventoryRef.id;
            }
        }

        const itemData = {
            name: itemName,
            category: itemCategory,
            price: itemPrice,
            image: imageBase64,
            description: itemDescription,
            status: itemStatus,
            inventoryId: inventoryId,
            updatedAt: Timestamp.now()
        };

        if (!currentEditingItem) {
            itemData.createdAt = Timestamp.now();
        }

        if (currentEditingItem) {
            await updateDoc(doc(db, 'menu', currentEditingItem), itemData);
            showNotification('Menu item updated successfully!', 'success');
        } else {
            await addDoc(collection(db, 'menu'), itemData);
            showNotification('Menu item added successfully!', 'success');
        }

        closeMenuModal();

    } catch (error) {
        showNotification(`Error saving menu item: ${error.message}`, 'error');
    } finally {
        saveBtn.disabled = false;
        saveBtn.textContent = originalText;
        document.getElementById('uploadProgress').style.display = 'none';
    }
});

// ==========================================
// PART 7: INDEX.HTML - Add Previous Orders UI
// ==========================================

// Location: In index.html, ADD this section before the order-status div:

<div class="previous-orders-section" style="margin-top: 30px;">
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <h3>Previous Orders</h3>
        <button onclick="togglePreviousOrders()" class="add-to-cart-btn" style="width: auto; padding: 8px 16px;">
            View History
        </button>
    </div>
    <div id="previousOrdersList" style="display: none;">
        <!-- Orders will be loaded here -->
    </div>
</div>

// Location: In scripts.js (customer side), ADD this function:

function loadPreviousOrders() {
    const previousOrders = JSON.parse(localStorage.getItem('previousOrders') || '[]');
    const ordersList = document.getElementById('previousOrdersList');
    
    if (!ordersList) return;

    if (previousOrders.length === 0) {
        ordersList.innerHTML = '<div class="empty-state"><p>No previous orders</p></div>';
        return;
    }

    ordersList.innerHTML = previousOrders.map(order => `
        <div style="background: #f8f9fa; border-radius: 10px; padding: 15px; margin-bottom: 10px;">
            <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                <strong>Ref: ${order.referenceNumber}</strong>
                <span style="color: #666; font-size: 0.9rem;">
                    ${new Date(order.timestamp).toLocaleDateString()}
                </span>
            </div>
            <div style="font-size: 0.9rem; color: #666; margin-bottom: 8px;">
                Table: ${order.tableNumber} | Items: ${order.items.length}
            </div>
            <div style="font-weight: bold; color: #BA8E4A;">
                Total: ₱${order.totalAmount.toFixed(2)}
            </div>
            <div style="margin-top: 8px; font-size: 0.85rem;">
                ${order.items.map(item => `${item.name} (x${item.quantity})`).join(', ')}
            </div>
        </div>
    `).join('');
}

window.togglePreviousOrders = function() {
    const ordersList = document.getElementById('previousOrdersList');
    if (ordersList.style.display === 'none') {
        ordersList.style.display = 'block';
        loadPreviousOrders();
    } else {
        ordersList.style.display = 'none';
    }
};

// ==========================================
// PART 8: STAFF.JS - Update Inventory on Order Completion
// ==========================================

// Location: In staff.js, UPDATE the updateOrderStatus function:

window.updateOrderStatus = async function(orderId, newStatus) {
    try {
        const orderRef = doc(db, 'orders', orderId);
        const orderSnap = await getDocs(query(collection(db, 'orders'), where('__name__', '==', orderId)));
        
        let orderData = null;
        orderSnap.forEach(doc => {
            orderData = doc.data();
        });

        await updateDoc(orderRef, {
            status: newStatus,
            updatedAt: new Date()
        });

        // Update inventory when order is completed
        if (newStatus === 'completed' && orderData && orderData.items) {
            for (const item of orderData.items) {
                if (item.inventoryId) {
                    const inventoryRef = doc(db, 'inventory', item.inventoryId);
                    const inventorySnap = await getDocs(query(
                        collection(db, 'inventory'),
                        where('__name__', '==', item.inventoryId)
                    ));
                    
                    let currentStock = 0;
                    inventorySnap.forEach(doc => {
                        currentStock = doc.data().stock || 0;
                    });

                    const newStock = Math.max(0, currentStock - item.quantity);
                    await updateDoc(inventoryRef, {
                        stock: newStock
                    });
                }
            }
        }

        if (soundEnabled) {
            playNotificationSound();
        }

        showNotification(`Order updated to ${getStatusText(newStatus)}!`, 'success');

    } catch (error) {
        console.error('Error updating order:', error);
        showNotification('Error updating order status', 'error');
    }
};

// ==========================================
// PART 9: ADMIN.HTML - Add Inventory Modal
// ==========================================

// Location: In admin.html, ADD this modal after the categoryModal:

<div class="modal" id="inventoryModal">
    <div class="modal-content">
        <span class="modal-close" onclick="closeInventoryModal()">×</span>
        <h2 id="inventoryModalTitle">Add Inventory Item</h2>
        <form id="inventoryForm" enctype="multipart/form-data">
            <div class="form-group">
                <label for="inventoryName">Item Name *</label>
                <input type="text" id="inventoryName" placeholder="Enter item name" required>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="inventoryCategory">Category *</label>
                    <select id="inventoryCategory" required>
                        <option value="">Select category</option>
                        <option value="meal-w-rice">Meal w/ Rice</option>
                        <option value="sizzling">Sizzling</option>
                        <option value="breaded-fillet">Breaded Fillet</option>
                        <option value="silog">Silog</option>
                        <option value="ala-carte">Ala Carte</option>
                        <option value="sinigang">Sinigang</option>
                        <option value="nilaga">Nilaga</option>
                        <option value="veggies">Veggies</option>
                        <option value="soup">Soup</option>
                        <option value="for-sharing">For Sharing</option>
                        <option value="pasta">Pasta</option>
                        <option value="appetizers">Appetizers</option>
                        <option value="drinks">Drinks</option>
                        <option value="extra">Extra</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="inventoryPrice">Price (₱) *</label>
                    <input type="number" id="inventoryPrice" placeholder="0.00" step="0.01" min="0" required>
                </div>
            </div>
            <div class="form-group">
                <label for="inventoryStock">Initial Stock *</label>
                <input type="number" id="inventoryStock" placeholder="0" min="0" required>
            </div>
            <div class="form-group">
                <label for="inventoryImageFile">Image *</label>
                <input type="file" id="inventoryImageFile" accept="image/*" required>
                <img id="inventoryImagePreview" src="" alt="" style="display:none;max-width:200px;margin-top:10px;border-radius:8px;">
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="inventoryStatus">Status *</label>
                    <select id="inventoryStatus" required>
                        <option value="available">Available</option>
                        <option value="unavailable">Unavailable</option>
                    </select>
                </div>
            </div>
            <div style="margin-top: 20px; display: flex; gap: 10px;">
                <button type="submit" class="btn-primary" style="flex: 1;">Save Item</button>
                <button type="button" class="btn-primary" onclick="closeInventoryModal()" style="background: #6c757d; flex: 1;">Cancel</button>
            </div>
        </form>
    </div>
</div>

// ==========================================
// PART 10: ADMIN.JS - Inventory Modal Functions
// ==========================================

// Location: In admin.js, ADD these functions:

let currentEditingInventory = null;

window.openInventoryModal = function(itemId = null) {
    currentEditingInventory = itemId;
    const modal = document.getElementById('inventoryModal');
    const title = document.getElementById('inventoryModalTitle');
    const preview = document.getElementById('inventoryImagePreview');
    const fileInput = document.getElementById('inventoryImageFile');

    fileInput.value = '';
    preview.src = '';
    preview.style.display = 'none';

    if (itemId) {
        // Load existing item data
        getDocs(query(collection(db, 'inventory'), where('__name__', '==', itemId)))
            .then(snapshot => {
                snapshot.forEach(doc => {
                    const item = doc.data();
                    title.textContent = 'Edit Inventory Item';
                    document.getElementById('inventoryName').value = item.name;
                    document.getElementById('inventoryCategory').value = item.category;
                    document.getElementById('inventoryPrice').value = item.price;
                    document.getElementById('inventoryStock').value = item.stock || 0;
                    document.getElementById('inventoryStatus').value = item.status || 'available';

                    if (item.image) {
                        preview.src = item.image;
                        preview.style.display = 'block';
                    }
                    fileInput.removeAttribute('required');
                });
            });
    } else {
        title.textContent = 'Add Inventory Item';
        document.getElementById('inventoryForm').reset();
        fileInput.setAttribute('required', 'required');
    }

    modal.classList.add('active');
};

window.closeInventoryModal = function() {
    document.getElementById('inventoryModal').classList.remove('active');
    document.getElementById('inventoryForm').reset();
    currentEditingInventory = null;
};

document.getElementById('inventoryImageFile').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const preview = document.getElementById('inventoryImagePreview');

    if (file) {
        if (!file.type.startsWith('image/')) {
            showNotification('Please select a valid image file', 'error');
            this.value = '';
            return;
        }

        const reader = new FileReader();
        reader.onload = function(evt) {
            preview.src = evt.target.result;
            preview.style.display = 'block';
        };
        reader.readAsDataURL(file);
    }
});

document.getElementById('inventoryForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const itemName = document.getElementById('inventoryName').value.trim();
    const itemCategory = document.getElementById('inventoryCategory').value;
    const itemPrice = parseFloat(document.getElementById('inventoryPrice').value);
    const itemStock = parseInt(document.getElementById('inventoryStock').value);
    const itemStatus = document.getElementById('inventoryStatus').value;
    const imageFile = document.getElementById('inventoryImageFile').files[0];

    try {
        let imageBase64 = null;
        if (imageFile) {
            imageBase64 = await convertImageToBase64(imageFile);
        } else if (currentEditingInventory) {
            const snapshot = await getDocs(query(
                collection(db, 'inventory'),
                where('__name__', '==', currentEditingInventory)
            ));
            snapshot.forEach(doc => {
                imageBase64 = doc.data().image;
            });
        }

        const itemData = {
            name: itemName,
            category: itemCategory,
            price: itemPrice,
            stock: itemStock,
            image: imageBase64,
            status: itemStatus,
            updatedAt: Timestamp.now()
        };

        if (!currentEditingInventory) {
            itemData.createdAt = Timestamp.now();
        }

        if (currentEditingInventory) {
            await updateDoc(doc(db, 'inventory', currentEditingInventory), itemData);
            showNotification('Inventory item updated successfully!', 'success');
        } else {
            await addDoc(collection(db, 'inventory'), itemData);
            showNotification('Inventory item added successfully!', 'success');
        }

        closeInventoryModal();
        renderInventory();

    } catch (error) {
        showNotification(`Error saving inventory item: ${error.message}`, 'error');
    }
});

window.editInventoryItem = function(itemId) {
    openInventoryModal(itemId);
};

window.deleteInventoryItem = async function(itemId) {
    if (confirm('Are you sure you want to delete this inventory item? This will also affect related menu items.')) {
        try {
            await deleteDoc(doc(db, 'inventory', itemId));
            showNotification('Inventory item deleted successfully!', 'success');
            renderInventory();
        } catch (error) {
            showNotification('Error deleting inventory item', 'error');
        }
    }
};

// ==========================================
// PART 11: STAFF.HTML - Remove Refresh Button
// ==========================================

// Location: In staff.html, REMOVE this button from header-actions:

// DELETE THIS:
<button class="refresh-btn" onclick="refreshOrders()">
    Refresh
</button>

// Also REMOVE the refreshOrders function from staff.js:
// DELETE THIS ENTIRE FUNCTION:
window.refreshOrders = async function() {
    await loadOrders();
    showNotification('Orders refreshed!', 'info');
};

// ==========================================
// PART 12: ADMIN.HTML - Remove Refresh Button
// ==========================================

// Location: In admin.html, REMOVE this button:

// DELETE THIS:
<button class="btn-primary" onclick="refreshData()" style="background: #BA8E4A;">
    Refresh Data
</button>

// Also REMOVE the refreshData function from admin.js:
// DELETE THIS ENTIRE FUNCTION:
window.refreshData = async function() {
    await loadAllData();
    showNotification('Data refreshed successfully!', 'success');
};

// ==========================================
// SUMMARY OF ALL CHANGES
// ==========================================

/*
COMPLETED FEATURES:

1. ✅ Table Number System via URL (?table=X)
2. ✅ Queue System (First-come-first-served)
3. ✅ Real-time Status Updates (Customer ↔ Staff)
4. ✅ Inventory Management System
5. ✅ Stock Tracking & Availability
6. ✅ Menu Items Linked to Inventory
7. ✅ Filter Counts in Staff Panel
8. ✅ Previous Orders (localStorage)
9. ✅ Firestore Credentials Authentication
10. ✅ Removed All Refresh Buttons (Real-time)
11. ✅ Automatic Stock Deduction on Order Completion
12. ✅ Status-based Availability (unavailable = hidden)

IMPLEMENTATION ORDER:

1. Create Firestore collections:
   - users (admin & staff documents)
   - inventory (with stock field)

2. Update existing menu items:
   - Add inventoryId field linking to inventory

3. Update HTML files:
   - Add inventory section to admin.html
   - Add previous orders section to index.html
   - Remove refresh buttons

4. Update JavaScript files:
   - Replace login handlers (admin.js & staff.js)
   - Update order rendering (staff.js)
   - Add inventory functions (admin.js)
   - Update customer ordering (scripts.js)

TESTING CHECKLIST:
□ Table number prompt works
□ Orders show correct table number in staff panel
□ Queue positions maintained
□ Real-time status updates
□ Inventory stock decreases on order completion
□ Menu items hide when out of stock
□ Previous orders save and display
□ Firestore authentication works
□ Filter counts update automatically
□ No refresh needed anywhere

All code sections provided above should be implemented in the order specified.
*/